workDir = '/data/tmp/nf'

params {
    // set global params
    input_dir = '/data/fastq/'
    output_dir = '/data/LPWGS'
    ref_ver = 'hg38'
    ref_dir = "/storage/references_and_index"
    flowcell_id = ""
    read_len = ""
    platform = 'Illumina'
    library = 'LPWGS'
    center = 'Gencurix'
    save_failed_trim = false
    wga = true
    tmp_dir = "/data/tmp"
}

singularity {
    enabled = true
    autoMounts = true
    runOptions = "--bind /data,/storage"
}

process {
    penv = 'smp'
    queue = 'all.q@ngsnode1'
    publishDir = [
        path: { "${params.output_dir}" }, 
        mode: 'link', 
        overwrite: false
    ]
    // Set output path
    withName: FASTP {
        container = "/storage/images/fastp-0.23.4.sif"
        ext = [
            args: """
                --trim_poly_g \\
                --adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA \\
                --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT \\
                """
        ]
    }

    withName: MEM {
        container = "/storage/images/dragmap-1.3.1.sif"
        ext = [
            args: """
                -M
                """
        ]   
    }

    withName: DRAGMAP {
        container = "/storage/images/dragmap-1.3.1.sif"
        ext = [
            args: """
                -r ${params.ref_dir}/${params.ref_ver}/fasta/dragmap/
                """
        ]   
    }

    // Resource usage 
    withLabel: 'standard' {
        cpus = 4
        memory = '8 GB'
    }

    withLabel: 'large_cpu' {
        cpus = 16
        memory = '32 GB'
    }

    withLabel: 'middle_mem' {
        cpus = 4
        memory = '32 GB'
    }

    withLabel: 'large_mem' {
        cpus = 8
        memory = '64 GB'
    }
}

executor {
    name = 'sge'
    queueSize = 100
}

// executor {
//     name = 'local'
// }

// 2. SGE Parallel Environment (qconf -spl) 설명
// qconf -spl 명령은 SGE에서 설정된 Parallel Environment(PE)의 목록을 보여줍니다. 각 PE는 작업의 병렬 처리 방식과 리소스 할당 방식을 정의합니다.

// make PE
// 용도: 단순 병렬 작업.
// 작동 방식: 작업을 병렬로 실행하지만, 슬롯 간 통신은 필요하지 않습니다.
// 사용 예: 독립적으로 실행되는 여러 작업을 병렬로 실행.
// mpi PE
// 용도: 다중 노드 병렬 작업.
// 작동 방식: MPI(Message Passing Interface)를 사용하여 여러 노드에 걸쳐 작업을 실행하며, 슬롯 간 통신이 필요합니다.
// 사용 예: 과학 계산, 고성능 컴퓨팅(HPC) 환경에서 자주 사용.
// smp PE
// 용도: 단일 노드에서 다중 슬롯 작업.
// 작동 방식: 작업이 하나의 노드에서 여러 CPU 코어(슬롯)를 사용하도록 설정합니다.
// 사용 예: 다중 스레드 작업(예: Fastp, BWA-MEM, GATK 등).